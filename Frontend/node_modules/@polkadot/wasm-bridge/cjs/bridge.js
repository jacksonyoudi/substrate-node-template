"use strict";
var _Bridge_cachegetInt32, _Bridge_cachegetUint8, _Bridge_createWasm, _Bridge_heap, _Bridge_heapNext, _Bridge_wasm, _Bridge_wasmError, _Bridge_wasmPromise, _Bridge_wbg, _Bridge_type;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bridge = void 0;
const tslib_1 = require("tslib");
const util_1 = require("@polkadot/util");
const wbg_js_1 = require("./wbg.js");
/**
 * @name Bridge
 * @description
 * Creates a bridge between the JS and WASM environments.
 *
 * For any bridge it is passed an function white is then called internally at the
 * time of initialization. This affectively implements the layer between WASM and
 * the native environment, providing all the plumbing needed for the Wbg classes.
 */
class Bridge {
    constructor(createWasm) {
        _Bridge_cachegetInt32.set(this, void 0);
        _Bridge_cachegetUint8.set(this, void 0);
        _Bridge_createWasm.set(this, void 0);
        _Bridge_heap.set(this, void 0);
        _Bridge_heapNext.set(this, void 0);
        _Bridge_wasm.set(this, void 0);
        _Bridge_wasmError.set(this, void 0);
        _Bridge_wasmPromise.set(this, void 0);
        _Bridge_wbg.set(this, void 0);
        _Bridge_type.set(this, void 0);
        tslib_1.__classPrivateFieldSet(this, _Bridge_createWasm, createWasm, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_cachegetInt32, null, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_cachegetUint8, null, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_heap, new Array(32)
            .fill(undefined)
            .concat(undefined, null, true, false), "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_heapNext, tslib_1.__classPrivateFieldGet(this, _Bridge_heap, "f").length, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_type, 'none', "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_wasm, null, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_wasmError, null, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_wasmPromise, null, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_wbg, { ...new wbg_js_1.Wbg(this) }, "f");
    }
    /** @description Returns the init error */
    get error() {
        return tslib_1.__classPrivateFieldGet(this, _Bridge_wasmError, "f");
    }
    /** @description Returns the init type */
    get type() {
        return tslib_1.__classPrivateFieldGet(this, _Bridge_type, "f");
    }
    /** @description Returns the created wasm interface */
    get wasm() {
        return tslib_1.__classPrivateFieldGet(this, _Bridge_wasm, "f");
    }
    /** @description Performs the wasm initialization */
    async init(createWasm) {
        if (!tslib_1.__classPrivateFieldGet(this, _Bridge_wasmPromise, "f") || createWasm) {
            tslib_1.__classPrivateFieldSet(this, _Bridge_wasmPromise, (createWasm || tslib_1.__classPrivateFieldGet(this, _Bridge_createWasm, "f"))(tslib_1.__classPrivateFieldGet(this, _Bridge_wbg, "f")), "f");
        }
        const { error, type, wasm } = await tslib_1.__classPrivateFieldGet(this, _Bridge_wasmPromise, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_type, type, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_wasm, wasm, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_wasmError, error, "f");
        return tslib_1.__classPrivateFieldGet(this, _Bridge_wasm, "f");
    }
    /**
     * @internal
     * @description Gets an object from the heap
     */
    getObject(idx) {
        return tslib_1.__classPrivateFieldGet(this, _Bridge_heap, "f")[idx];
    }
    /**
     * @internal
     * @description Removes an object from the heap
     */
    dropObject(idx) {
        if (idx < 36) {
            return;
        }
        tslib_1.__classPrivateFieldGet(this, _Bridge_heap, "f")[idx] = tslib_1.__classPrivateFieldGet(this, _Bridge_heapNext, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_heapNext, idx, "f");
    }
    /**
     * @internal
     * @description Retrieves and removes an object to the heap
     */
    takeObject(idx) {
        const ret = this.getObject(idx);
        this.dropObject(idx);
        return ret;
    }
    /**
     * @internal
     * @description Adds an object to the heap
     */
    addObject(obj) {
        if (tslib_1.__classPrivateFieldGet(this, _Bridge_heapNext, "f") === tslib_1.__classPrivateFieldGet(this, _Bridge_heap, "f").length) {
            tslib_1.__classPrivateFieldGet(this, _Bridge_heap, "f").push(tslib_1.__classPrivateFieldGet(this, _Bridge_heap, "f").length + 1);
        }
        const idx = tslib_1.__classPrivateFieldGet(this, _Bridge_heapNext, "f");
        tslib_1.__classPrivateFieldSet(this, _Bridge_heapNext, tslib_1.__classPrivateFieldGet(this, _Bridge_heap, "f")[idx], "f");
        tslib_1.__classPrivateFieldGet(this, _Bridge_heap, "f")[idx] = obj;
        return idx;
    }
    /**
     * @internal
     * @description Retrieve an Int32 in the WASM interface
     */
    getInt32() {
        if (tslib_1.__classPrivateFieldGet(this, _Bridge_cachegetInt32, "f") === null || tslib_1.__classPrivateFieldGet(this, _Bridge_cachegetInt32, "f").buffer !== tslib_1.__classPrivateFieldGet(this, _Bridge_wasm, "f").memory.buffer) {
            tslib_1.__classPrivateFieldSet(this, _Bridge_cachegetInt32, new Int32Array(tslib_1.__classPrivateFieldGet(this, _Bridge_wasm, "f").memory.buffer), "f");
        }
        return tslib_1.__classPrivateFieldGet(this, _Bridge_cachegetInt32, "f");
    }
    /**
     * @internal
     * @description Retrieve an Uint8Array in the WASM interface
     */
    getUint8() {
        if (tslib_1.__classPrivateFieldGet(this, _Bridge_cachegetUint8, "f") === null || tslib_1.__classPrivateFieldGet(this, _Bridge_cachegetUint8, "f").buffer !== tslib_1.__classPrivateFieldGet(this, _Bridge_wasm, "f").memory.buffer) {
            tslib_1.__classPrivateFieldSet(this, _Bridge_cachegetUint8, new Uint8Array(tslib_1.__classPrivateFieldGet(this, _Bridge_wasm, "f").memory.buffer), "f");
        }
        return tslib_1.__classPrivateFieldGet(this, _Bridge_cachegetUint8, "f");
    }
    /**
     * @internal
     * @description Retrieves an Uint8Array in the WASM interface
     */
    getU8a(ptr, len) {
        return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
    }
    /**
     * @internal
     * @description Retrieves a string in the WASM interface
     */
    getString(ptr, len) {
        return (0, util_1.u8aToString)(this.getU8a(ptr, len));
    }
    /**
     * @internal
     * @description Allocates an Uint8Array in the WASM interface
     */
    allocU8a(arg) {
        const ptr = tslib_1.__classPrivateFieldGet(this, _Bridge_wasm, "f").__wbindgen_malloc(arg.length * 1);
        this.getUint8().set(arg, ptr / 1);
        return [ptr, arg.length];
    }
    /**
     * @internal
     * @description Allocates a string in the WASM interface
     */
    allocString(arg) {
        return this.allocU8a((0, util_1.stringToU8a)(arg));
    }
    /**
     * @internal
     * @description Retrieves an Uint8Array from the WASM interface
     */
    resultU8a() {
        const r0 = this.getInt32()[8 / 4 + 0];
        const r1 = this.getInt32()[8 / 4 + 1];
        const ret = this.getU8a(r0, r1).slice();
        tslib_1.__classPrivateFieldGet(this, _Bridge_wasm, "f").__wbindgen_free(r0, r1 * 1);
        return ret;
    }
    /**
     * @internal
     * @description Retrieve a string from the WASM interface
     */
    resultString() {
        return (0, util_1.u8aToString)(this.resultU8a());
    }
}
exports.Bridge = Bridge;
_Bridge_cachegetInt32 = new WeakMap(), _Bridge_cachegetUint8 = new WeakMap(), _Bridge_createWasm = new WeakMap(), _Bridge_heap = new WeakMap(), _Bridge_heapNext = new WeakMap(), _Bridge_wasm = new WeakMap(), _Bridge_wasmError = new WeakMap(), _Bridge_wasmPromise = new WeakMap(), _Bridge_wbg = new WeakMap(), _Bridge_type = new WeakMap();